QUESTIONS:

- What is CORBA architecture?
    - A specification for getting programs to communicate with one another


LESSONS:

- Don't Repeat Yourself (DRY principle)
    - If you find yourself copying and pasting code, stop it
    - Make it a method/function or put it in a library

- Decouple
    - Program in modules that communicate with each other via interfaces; they are indpendent of each other
    - Concept of spies divided into cells to protect the whole [pg. 163]

- When planning out a project, make sure critical decisions are reversible [pg. 44] 
    - Don't depend on some third party library/product/service
        - Write another layer that interfaces with your code and that library so that you can just rewrite the interface instead of the whole codebase

- Tracer code [pg. 48]
    - Integrate all parts of the program early and make sure everything is working by firing off code that will work end-to-end
        - Limited functionality, but shows ability to go from input to output is important

- Design by Contract DBC [pg.134]
    - Stipulate preconditions, postconditions, and invariants for all classes and routines
    - Can also say you are determining input domain range, boundary conditions and promised functionality before writing the class/method
    - Can use assert statements to double check while developing/debugging 

- Use assertions [pg. 147]
	- Don't assume it can never happen; write code to check if it did happen
	- Never put code that MUST be executed into an assert statement; you should be able to turn them off
	- Assert statements do not replace error handling

- Broken windows lead to downward spiral [pg. 30]
	- Leaving a broken window leads to apathy

- Use metadata (think like preference vars for program settings) [pg. 169]
	- Don't hardcode
	- Make things as configurable as possible w/o having to change code
	- This can be accomplished with a database schema filled with variables
	- "Program for the general case, and put the specifics somewhere else... Put Abstractions in Code, Details in Metadata." 
